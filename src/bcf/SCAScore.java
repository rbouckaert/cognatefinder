package bcf;

import java.util.HashMap;
import java.util.Map;

// Sound Class Based Score
// https://academic.oup.com/jole/article/3/2/130/5050100
public class SCAScore extends Score {
	double [][] score = new double[][] { 
			/* + */ {0.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -100.00 , -5.00 , -100.00 , -100.00},
			/* 0 */ {-100.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00},
			/* 1 */ {-100.00 , 0.00 , 2.00 , 1.00 , 1.00 , 1.00 , 1.00 , 1.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -20.00 , -20.00},
			/* 2 */ {-100.00 , 0.00 , 1.00 , 2.00 , 1.00 , 1.00 , 1.00 , 1.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -20.00 , -20.00},
			/* 3 */ {-100.00 , 0.00 , 1.00 , 1.00 , 2.00 , 1.00 , 1.00 , 1.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -20.00 , -20.00},
			/* 4 */ {-100.00 , 0.00 , 1.00 , 1.00 , 1.00 , 2.00 , 1.00 , 1.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -20.00 , -20.00},
			/* 5 */ {-100.00 , 0.00 , 1.00 , 1.00 , 1.00 , 1.00 , 2.00 , 1.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -20.00 , -20.00},
			/* 6 */ {-100.00 , 0.00 , 1.00 , 1.00 , 1.00 , 1.00 , 1.00 , 2.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -20.00 , -20.00},
			/* 9 */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 10.00 , -10.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 0.00 , 9.00 , 9.00 , -10.00 , 0.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , -10.00},
			/* A */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -10.00 , 5.00 , -10.00 , -10.00 , -10.00 , 4.00 , -10.00 , -10.00 , 4.00 , -6.00 , -10.00 , -10.00 , -10.00 , -10.00 , 4.00 , -10.00 , -10.00 , -10.00 , -10.00 , 4.00 , -6.00 , 0.00 , 4.00 , -10.00},
			/* B */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -10.00 , 10.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , -10.00 , 6.00 , 0.00 , 0.00 , 0.00 , -10.00 , 6.00 , 0.00 , -9.00 , -10.00},
			/* C */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -10.00 , 0.00 , 10.00 , 2.00 , -10.00 , 2.00 , 2.00 , -10.00 , 0.00 , 6.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 6.00 , 6.00 , -10.00 , 0.00 , 0.00 , -10.00 , -10.00},
			/* D */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -10.00 , 0.00 , 2.00 , 10.00 , -10.00 , 0.00 , 2.00 , -10.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 6.00 , 6.00 , -10.00 , 0.00 , 0.00 , -10.00 , -10.00},
			/* E */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -10.00 , 4.00 , -10.00 , -10.00 , -10.00 , 5.00 , -10.00 , -10.00 , 4.00 , -6.00 , -10.00 , -10.00 , -10.00 , -10.00 , 4.00 , -10.00 , -10.00 , -10.00 , -10.00 , 4.00 , -6.00 , 0.00 , 4.00 , -10.00},
			/* G */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -10.00 , 0.00 , 2.00 , 0.00 , -10.00 , 10.00 , 2.00 , -10.00 , 0.00 , 6.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 6.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , -10.00},
			/* H */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -10.00 , 0.00 , 2.00 , 2.00 , -10.00 , 2.00 , 10.00 , -10.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 6.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , -10.00},
			/* I */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -10.00 , 4.00 , -10.00 , -10.00 , -10.00 , 4.00 , -10.00 , -10.00 , 5.00 , -5.00 , -10.00 , -10.00 , -10.00 , -10.00 , 4.00 , -10.00 , -10.00 , -10.00 , -10.00 , 3.00 , -6.00 , 0.00 , 4.00 , -10.00},
			/* J */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -6.00 , 0.00 , 0.00 , 0.00 , -6.00 , 0.00 , 0.00 , -5.00 , 10.00 , 0.00 , 0.00 , 0.00 , 0.00 , -6.00 , 0.00 , 0.00 , 0.00 , 0.00 , -6.00 , 0.00 , 0.00 , -6.00 , -10.00},
			/* K */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -10.00 , 0.00 , 6.00 , 0.00 , -10.00 , 6.00 , 0.00 , -10.00 , 0.00 , 10.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 2.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , -10.00},
			/* L */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -10.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 10.00 , 0.00 , 0.00 , -10.00 , 0.00 , 4.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , -10.00},
			/* M */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 9.00 , -10.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 0.00 , 10.00 , 1.00 , -10.00 , 0.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , -10.00},
			/* N */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 9.00 , -10.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 0.00 , 1.00 , 10.00 , -10.00 , 0.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , -10.00},
			/* O */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -10.00 , 4.00 , -10.00 , -10.00 , -10.00 , 4.00 , -10.00 , -10.00 , 4.00 , -6.00 , -10.00 , -10.00 , -10.00 , -10.00 , 5.00 , -10.00 , -10.00 , -10.00 , -10.00 , 4.00 , -6.00 , 0.00 , 4.00 , -10.00},
			/* P */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -10.00 , 6.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , -10.00 , 10.00 , 0.00 , 0.00 , 0.00 , -10.00 , 2.00 , 0.00 , -10.00 , -10.00},
			/* R */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -10.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 4.00 , 0.00 , 0.00 , -10.00 , 0.00 , 10.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , -10.00 , -10.00},
			/* S */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -10.00 , 0.00 , 6.00 , 6.00 , -10.00 , 6.00 , 6.00 , -10.00 , 0.00 , 2.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 10.00 , 2.00 , -10.00 , 0.00 , 0.00 , -10.00 , -10.00},
			/* T */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -10.00 , 0.00 , 6.00 , 6.00 , -10.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , -10.00 , 0.00 , 0.00 , 2.00 , 10.00 , -10.00 , 0.00 , 0.00 , -10.00 , -10.00},
			/* U */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -10.00 , 4.00 , -10.00 , -10.00 , -10.00 , 4.00 , -10.00 , -10.00 , 3.00 , -6.00 , -10.00 , -10.00 , -10.00 , -10.00 , 4.00 , -10.00 , -10.00 , -10.00 , -10.00 , 5.00 , -6.00 , 0.00 , 4.00 , -10.00},
			/* W */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , 0.00 , -6.00 , 6.00 , 0.00 , 0.00 , -6.00 , 0.00 , 0.00 , -6.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , -6.00 , 2.00 , 0.00 , 0.00 , 0.00 , -6.00 , 10.00 , 0.00 , -5.00 , -10.00},
			/* X */ {-5.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00 , 0.00},
			/* Y */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -10.00 , 4.00 , -9.00 , -10.00 , -10.00 , 4.00 , -10.00 , -10.00 , 4.00 , -6.00 , -10.00 , -10.00 , -10.00 , -10.00 , 4.00 , -10.00 , -10.00 , -10.00 , -10.00 , 4.00 , -5.00 , 0.00 , 5.00 , -10.00},
			/* _ */ {-100.00 , 0.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -20.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , -10.00 , 0.00 , -10.00 , 10.00}
			};

			
	public SCAScore() {
		charMap = new HashMap<>();		
		process(0, "-");
		/* 1 */ process(1, "₁₁,₂₂,¹¹,²²");
		/* 2 */ process(2, "₁₂,₁₃,₁₄,₁₅,₂₃,₂₄,₂₅,₃₄,₃₅,₄₅,¹²,¹³,¹⁴,¹⁵,²³,²⁴,²⁵,³⁵,³⁴,⁴⁵");
		/* 3 */ process(3, "₅₁,₅₂,₅₃,₅₄,₄₃,₄₂,₄₁,₃₂,₃₁,₂₁,⁵¹,⁵²,⁵³,⁵⁴,⁴¹,⁴²,⁴³,³¹,³²,²¹");
		/* 4 */ process(4, "₃₃,³³");
		/* 5 */ process(5, "₄₄,₅₅,⁵⁵,⁴⁴");
		/* 6 */ process(6, "⁰,¹,²,³,⁴,⁵,⁻,₁,₂,₃,₄,˥,˦,˧,˨,₅,₆,₀");
		/* 9 */ process(7, "∼");
		/* A */ process(8, "a,ᴀ,ã,ɑ,á,á,à,ā,ǎ,â,ä,ă,ă,ạ,а,å,ạ,a\",aː,a:ʰ");
		/* B */ process(9, "ɸ,β,f,p͡f,p͜f,ƀ,p͡f,b͡v,pf,bv,v,ʙ,ḇ");
		/* C */ process(10, "t͡s,t͜s,d͡z,d͜z,ʦ,ʣ,t͡ɕ,t͜ɕ,d͡ʑ,d͜ʑ,ʨ,ʥ,t͡ʃ,t͜ʃ,d͡ʒ,d͜ʒ,ʧ,ʤ,c,ɟ,t͡ʂ,t͜ʂ,d͡ʐ,d͜ʐ,č,t͡θ,t͜θ,ʄ,ǰ,ĵ,Ɉ,ʈʂ,ɖʐ,ʈʂʰ,tɕ,tɕʰ,dʑ,ts,dz,tsʰ");
		/* D */ process(11, "θ,ð,ŧ,þ,đ,Ɵ");
		/* E */ process(12, "ɛ,æ,ɜ,ɐ,ʌ,e,ᴇ,ə,ɘ,ɤ,è,é,ē,ě,ê,ɚ,ǝ,ẽ,ĕ,ḛ,ε,е,ę,ḛ,ȇ,ë,ε,Ɛ,eː");
		/* G */ process(13, "x,ɣ,χ");
		/* H */ process(14, "ʔ,ħ,ʕ,h,ɦ,ḥ,Ɂ,ʡ,'ʷ");
		/* I */ process(15, "i,ɪ,ɨ,ɿ,ʅ,ɯ,ĩ,í,ǐ,ì,î,ī,ı,ĭ,ḭ,ɩ,ï,ị,ๅ,ḭ,iː");
		/* J */ process(16, "j,ɥ,ɰ");
		/* K */ process(17, "k,g,q,ɢ,ɡ,ḳ,ǥ,ǵ,ḡ,gʰ,kʰ");
		/* L */ process(18, "l,ȴ,l,ɭ,ʎ,ʟ,ɬ,ɮ,ł,ɫ,ḷ,ļ,ḻ,lʰ,ʰl");
		/* M */ process(19, "m,ɱ,ʍ,ṃ,ʰm");
		/* N */ process(20, "n,ȵ,ɳ,ŋ,ɴ,ň,ń,ɲ,ñ,ṇ,ῃ,ņ,ṋ,ṅ,ṉ");
		/* O */ process(21, "Œ,ɒ");
		/* P */ process(22, "p,b,ɓ,ᵐb,ᵐp,р,bʰ");
		/* R */ process(23, "ɹ,ɻ,ʀ,ɾ,r,ʁ,ɽ,ɐ̯,ɺ,ṛ,ᵲ,ř,ȓ,ṛ́,ṙ,ṟ");
		/* S */ process(24, "s,z,ʃ,∫,ʒ,ʂ,ʐ,ç,ʝ,š,ž,ɕ,ɧ,ʑ,ś,ṣ,ß,ŝ,ż,ẓ,tʃ,ʰs");
		/* T */ process(25, "t,d,ȶ,ȡ,ɗ,ʈ,ɖ,ţ,т,ṱ,ṭ,ḍ,ḏ,dʰ,tʰ,ɖʰ");
		/* U */ process(26, "œ,ɞ,ɔ,ø,ɵ,o,õ,ó,ò,ō,ɶ,ô,ɷ,ǒ,ö,ŏ,ʮ,ọ,ȯ,ố,ǫ,ṍ,oː");
		/* W */ process(27, "w,ʋ,ⱱ,ṿ,υ,ṽ");
		/* X */// process(28, ""); ??
		/* Y */ process(29, "y,ỹ,ỹ,ṳ,ṵ,ʏ,ʉ,u,ᴜ,ʊ,ú,ù,ũ,ü,ŭ,ǔ,ụ,ū,ỳ,û,û,ý,ў,ȗ,ṹ,uː");
		/* _ */ process(30, "_,#,+,◦,·");
		
		setScore(score);
	}
	

		
}
